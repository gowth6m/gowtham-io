{"ast":null,"code":"var _jsxFileName = \"/Users/gowtham/Documents/GitHub/myportfolio/src/components/TypingText.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingText = _ref => {\n  _s();\n  let {\n    strings\n  } = _ref;\n  const [typingText, setTypingText] = useState('');\n  const [currentStringIndex, setCurrentStringIndex] = useState(0);\n\n  // Use an interval to update the typing text\n  useInterval(() => {\n    // If we have reached the end of the current string, move to the next one\n    if (typingText === strings[currentStringIndex]) {\n      setCurrentStringIndex(currentStringIndex + 1);\n      setTypingText('');\n    } else {\n      // Append the next character of the current string\n      const nextChar = strings[currentStringIndex].charAt(typingText.length);\n      setTypingText(typingText + nextChar);\n    }\n  }, 100); // Update the text every 100ms\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: typingText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to handle the interval for updating the typing text\n_s(TypingText, \"e3Et0o5j/Tx4BgDYwKxHeJDCGlE=\", false, function () {\n  return [useInterval];\n});\n_c = TypingText;\nfunction useInterval(callback, delay) {\n  _s2();\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n_s2(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\nexport default TypingText;\nvar _c;\n$RefreshReg$(_c, \"TypingText\");","map":{"version":3,"names":["React","useState","TypingText","strings","typingText","setTypingText","currentStringIndex","setCurrentStringIndex","useInterval","nextChar","charAt","length","callback","delay","savedCallback","useRef","useEffect","current","tick","id","setInterval","clearInterval"],"sources":["/Users/gowtham/Documents/GitHub/myportfolio/src/components/TypingText.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst TypingText = ({strings}) => {\n  const [typingText, setTypingText] = useState('');\n  const [currentStringIndex, setCurrentStringIndex] = useState(0);\n\n  // Use an interval to update the typing text\n  useInterval(() => {\n    // If we have reached the end of the current string, move to the next one\n    if (typingText === strings[currentStringIndex]) {\n      setCurrentStringIndex(currentStringIndex + 1);\n      setTypingText('');\n    } else {\n      // Append the next character of the current string\n      const nextChar = strings[currentStringIndex].charAt(typingText.length);\n      setTypingText(typingText + nextChar);\n    }\n  }, 100); // Update the text every 100ms\n\n  return <div>{typingText}</div>;\n}\n\n// Custom hook to handle the interval for updating the typing text\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n\nexport default TypingText;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,MAAMC,UAAU,GAAG,QAAe;EAAA;EAAA,IAAd;IAACC;EAAO,CAAC;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACK,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;;EAE/D;EACAO,WAAW,CAAC,MAAM;IAChB;IACA,IAAIJ,UAAU,KAAKD,OAAO,CAACG,kBAAkB,CAAC,EAAE;MAC9CC,qBAAqB,CAACD,kBAAkB,GAAG,CAAC,CAAC;MAC7CD,aAAa,CAAC,EAAE,CAAC;IACnB,CAAC,MAAM;MACL;MACA,MAAMI,QAAQ,GAAGN,OAAO,CAACG,kBAAkB,CAAC,CAACI,MAAM,CAACN,UAAU,CAACO,MAAM,CAAC;MACtEN,aAAa,CAACD,UAAU,GAAGK,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;EAET,oBAAO;IAAA,UAAML;EAAU;IAAA;IAAA;IAAA;EAAA,QAAO;AAChC,CAAC;;AAED;AAAA,GApBMF,UAAU;EAAA,QAKdM,WAAW;AAAA;AAAA,KALPN,UAAU;AAqBhB,SAASM,WAAW,CAACI,QAAQ,EAAEC,KAAK,EAAE;EAAA;EACpC,MAAMC,aAAa,GAAGC,MAAM,EAAE;;EAE9B;EACAC,SAAS,CAAC,MAAM;IACdF,aAAa,CAACG,OAAO,GAAGL,QAAQ;EAClC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACAI,SAAS,CAAC,MAAM;IACd,SAASE,IAAI,GAAG;MACdJ,aAAa,CAACG,OAAO,EAAE;IACzB;IACA,IAAIJ,KAAK,KAAK,IAAI,EAAE;MAClB,IAAIM,EAAE,GAAGC,WAAW,CAACF,IAAI,EAAEL,KAAK,CAAC;MACjC,OAAO,MAAMQ,aAAa,CAACF,EAAE,CAAC;IAChC;EACF,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;AACb;AAAC,IAlBQL,WAAW;AAqBpB,eAAeN,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}