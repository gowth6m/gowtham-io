{"ast":null,"code":"var _jsxFileName = \"/Users/gowtham/Documents/GitHub/myportfolio/src/components/TypingText.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingText = () => {\n  _s();\n  const [typingText, setTypingText] = useState('Typing...');\n  const [strings, setStrings] = useState(['Hello', 'World', 'Welcome']);\n  const [stringIndex, setStringIndex] = useState(0);\n\n  // Use an interval to update the typing text\n  useInterval(() => {\n    // Get the current string from the list\n    const currentString = strings[stringIndex];\n\n    // If the current string has not been fully typed out\n    if (typingText.length < currentString.length) {\n      // Append the next character from the current string to the typing text\n      setTypingText(typingText + currentString.charAt(typingText.length));\n    } else {\n      // If the current string has been fully typed out, move on to the next string\n      setTypingText('Typing...');\n      setStringIndex((stringIndex + 1) % strings.length);\n    }\n  }, 100); // Update the text every 100ms\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: typingText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to handle the interval for updating the typing text\n_s(TypingText, \"gvns1IeIdNPTcnIVjt+g7UjDBRg=\", false, function () {\n  return [useInterval];\n});\n_c = TypingText;\nfunction useInterval(callback, delay) {\n  _s2();\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n_s2(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\nexport default TypingText;\nvar _c;\n$RefreshReg$(_c, \"TypingText\");","map":{"version":3,"names":["React","useRef","useState","TypingText","typingText","setTypingText","strings","setStrings","stringIndex","setStringIndex","useInterval","currentString","length","charAt","callback","delay","savedCallback","useEffect","current","tick","id","setInterval","clearInterval"],"sources":["/Users/gowtham/Documents/GitHub/myportfolio/src/components/TypingText.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\n\nconst TypingText = () => {\n  const [typingText, setTypingText] = useState('Typing...');\n  const [strings, setStrings] = useState(['Hello', 'World', 'Welcome']);\n  const [stringIndex, setStringIndex] = useState(0);\n\n  // Use an interval to update the typing text\n  useInterval(() => {\n    // Get the current string from the list\n    const currentString = strings[stringIndex];\n\n    // If the current string has not been fully typed out\n    if (typingText.length < currentString.length) {\n      // Append the next character from the current string to the typing text\n      setTypingText(typingText + currentString.charAt(typingText.length));\n    } else {\n      // If the current string has been fully typed out, move on to the next string\n      setTypingText('Typing...');\n      setStringIndex((stringIndex + 1) % strings.length);\n    }\n  }, 100); // Update the text every 100ms\n\n  return <div>{typingText}</div>;\n}\n\n// Custom hook to handle the interval for updating the typing text\nfunction useInterval(callback: (() => void) | undefined, delay: number | null | undefined) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default TypingText;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAEhD,MAAMC,UAAU,GAAG,MAAM;EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGH,QAAQ,CAAC,WAAW,CAAC;EACzD,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;EACrE,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;;EAEjD;EACAQ,WAAW,CAAC,MAAM;IAChB;IACA,MAAMC,aAAa,GAAGL,OAAO,CAACE,WAAW,CAAC;;IAE1C;IACA,IAAIJ,UAAU,CAACQ,MAAM,GAAGD,aAAa,CAACC,MAAM,EAAE;MAC5C;MACAP,aAAa,CAACD,UAAU,GAAGO,aAAa,CAACE,MAAM,CAACT,UAAU,CAACQ,MAAM,CAAC,CAAC;IACrE,CAAC,MAAM;MACL;MACAP,aAAa,CAAC,WAAW,CAAC;MAC1BI,cAAc,CAAC,CAACD,WAAW,GAAG,CAAC,IAAIF,OAAO,CAACM,MAAM,CAAC;IACpD;EACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;EAET,oBAAO;IAAA,UAAMR;EAAU;IAAA;IAAA;IAAA;EAAA,QAAO;AAChC,CAAC;;AAED;AAAA,GAxBMD,UAAU;EAAA,QAMdO,WAAW;AAAA;AAAA,KANPP,UAAU;AAyBhB,SAASO,WAAW,CAACI,QAAkC,EAAEC,KAAgC,EAAE;EAAA;EACzF,MAAMC,aAAa,GAAGf,MAAM,EAAE;;EAE9B;EACAgB,SAAS,CAAC,MAAM;IACdD,aAAa,CAACE,OAAO,GAAGJ,QAAQ;EAClC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACAG,SAAS,CAAC,MAAM;IACd,SAASE,IAAI,GAAG;MACdH,aAAa,CAACE,OAAO,EAAE;IACzB;IACA,IAAIH,KAAK,KAAK,IAAI,EAAE;MAClB,IAAIK,EAAE,GAAGC,WAAW,CAACF,IAAI,EAAEJ,KAAK,CAAC;MACjC,OAAO,MAAMO,aAAa,CAACF,EAAE,CAAC;IAChC;EACF,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;AACb;AAAC,IAlBQL,WAAW;AAoBpB,eAAeP,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}