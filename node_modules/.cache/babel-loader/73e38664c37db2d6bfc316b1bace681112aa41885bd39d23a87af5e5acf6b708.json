{"ast":null,"code":"var _jsxFileName = \"/Users/gowtham/Documents/GitHub/myportfolio/src/components/home/BackgroundAnimation.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport \"./BackgroundAnimation.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function BackgroundAnimation() {\n  _s();\n  const [windowSize, setWindowSize] = useState(getWindowSize());\n  function getWindowSize() {\n    const {\n      innerWidth,\n      innerHeight\n    } = window;\n    return {\n      innerWidth,\n      innerHeight\n    };\n  }\n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize(getWindowSize());\n    }\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleWindowResize);\n    };\n  }, []);\n\n  // ---------------------------------------------------------\n  // Animation\n  const canvasRef = useRef(null);\n  const state = {\n    canvasWidth: windowSize.innerWidth,\n    canvasHeight: windowSize.innerHeight\n  };\n  useEffect(() => {\n    if (canvasRef.current) {\n      const c = canvasRef.current.getContext(\"2d\");\n      const makeStars = count => {\n        const out = [];\n        for (let i = 0; i < count; i++) {\n          const star = {\n            x: (Math.random() - 0.5) * state.canvasWidth * 2,\n            y: (Math.random() - 0.5) * state.canvasHeight * 2,\n            z: i * 1000 / count\n          };\n          out.push(star);\n        }\n        return out;\n      };\n      let stars = state.canvasWidth < makeStars(1000);\n      const clear = () => {\n        c.fillRect(0, 0, state.canvasWidth, state.canvasHeight);\n      };\n      const putPixel = (x, y, brightness, size) => {\n        const intensity = brightness * 255;\n        const rgb = \"rgb(\" + intensity + \",\" + intensity + \",\" + intensity + \")\";\n        c.fillStyle = rgb;\n        c.fillRect(x, y, size, size);\n      };\n      const moveStars = distance => {\n        const count = stars.length;\n        for (let star of stars) {\n          star.z += distance;\n        }\n        for (let i = 0; stars[count - 1].z > 1000; i++) {\n          // Replace star\n          stars.pop();\n          stars.unshift({\n            x: (Math.random() - 0.5) * state.canvasWidth * 2,\n            y: (Math.random() - 0.5) * state.canvasHeight * 2,\n            z: stars[0].z - 1000 / count // keep z ordered\n          });\n        }\n      };\n\n      let prevTime;\n      const init = time => {\n        prevTime = time;\n        requestAnimationFrame(tick);\n      };\n      const tick = time => {\n        let elapsed = time - prevTime;\n        prevTime = time;\n        moveStars(elapsed * 0.03);\n        clear();\n        const cx = state.canvasWidth / 2;\n        const cy = state.canvasHeight / 2;\n        for (let star of stars) {\n          const x = cx + star.x / (star.z * 0.001);\n          const y = cy + star.y / (star.z * 0.001);\n          if (x < 0 || x >= state.canvasWidth || y < 0 || y >= state.canvasHeight) {\n            continue;\n          }\n          const distance = star.z / 1000;\n          const brightness = 1 - distance * distance;\n          const size = brightness * 5;\n          putPixel(x, y, brightness, size);\n        }\n        requestAnimationFrame(tick);\n      };\n      requestAnimationFrame(init);\n    }\n  }, [state.canvasHeight, state.canvasWidth]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"homeCanvas\",\n    className: \"home-canvas\",\n    ref: canvasRef,\n    width: state.canvasWidth,\n    height: state.canvasHeight\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(BackgroundAnimation, \"1pwljCxmv4nHYsD+v0jMPgT3Eis=\");\n_c = BackgroundAnimation;\nvar _c;\n$RefreshReg$(_c, \"BackgroundAnimation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BackgroundAnimation","windowSize","setWindowSize","getWindowSize","innerWidth","innerHeight","window","handleWindowResize","addEventListener","removeEventListener","canvasRef","state","canvasWidth","canvasHeight","current","c","getContext","makeStars","count","out","i","star","x","Math","random","y","z","push","stars","clear","fillRect","putPixel","brightness","size","intensity","rgb","fillStyle","moveStars","distance","length","pop","unshift","prevTime","init","time","requestAnimationFrame","tick","elapsed","cx","cy"],"sources":["/Users/gowtham/Documents/GitHub/myportfolio/src/components/home/BackgroundAnimation.tsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport \"./BackgroundAnimation.css\";\n\nexport function BackgroundAnimation() {\n  const [windowSize, setWindowSize] = useState(getWindowSize());\n\n  function getWindowSize() {\n    const { innerWidth, innerHeight } = window;\n    return { innerWidth, innerHeight };\n  }\n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize(getWindowSize());\n    }\n    window.addEventListener(\"resize\", handleWindowResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleWindowResize);\n    };\n  }, []);\n\n  // ---------------------------------------------------------\n  // Animation\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const state = {\n    canvasWidth: windowSize.innerWidth,\n    canvasHeight: windowSize.innerHeight,\n  };\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const c = canvasRef.current.getContext(\"2d\");\n\n      const makeStars = (count: number) => {\n        const out = [];\n        for (let i = 0; i < count; i++) {\n          const star = {\n            x: (Math.random() - 0.5) * state.canvasWidth * 2,\n            y: (Math.random() - 0.5) * state.canvasHeight * 2,\n            z: (i * 1000) / count,\n          };\n          out.push(star);\n        }\n        return out;\n      };\n\n      let stars = state.canvasWidth < makeStars(1000);\n\n      const clear = () => {\n        c!.fillRect(0, 0, state.canvasWidth, state.canvasHeight);\n      };\n\n      const putPixel = (\n        x: number,\n        y: number,\n        brightness: number,\n        size: number\n      ) => {\n        const intensity = brightness * 255;\n        const rgb =\n          \"rgb(\" + intensity + \",\" + intensity + \",\" + intensity + \")\";\n        c!.fillStyle = rgb;\n        c!.fillRect(x, y, size, size);\n      };\n\n      const moveStars = (distance: number) => {\n        const count = stars.length;\n\n        for (let star of stars) {\n          star.z += distance;\n        }\n        for (let i = 0; stars[count - 1].z > 1000; i++) {\n          // Replace star\n          stars.pop();\n          stars.unshift({\n            x: (Math.random() - 0.5) * state.canvasWidth * 2,\n            y: (Math.random() - 0.5) * state.canvasHeight * 2,\n            z: stars[0].z - 1000 / count, // keep z ordered\n          });\n        }\n      };\n\n      let prevTime: number;\n      const init = (time: number) => {\n        prevTime = time;\n        requestAnimationFrame(tick);\n      };\n\n      const tick = (time: number) => {\n        let elapsed = time - prevTime;\n        prevTime = time;\n\n        moveStars(elapsed * 0.03);\n\n        clear();\n\n        const cx = state.canvasWidth / 2;\n        const cy = state.canvasHeight / 2;\n\n        for (let star of stars) {\n          const x = cx + star.x / (star.z * 0.001);\n          const y = cy + star.y / (star.z * 0.001);\n\n          if (\n            x < 0 ||\n            x >= state.canvasWidth ||\n            y < 0 ||\n            y >= state.canvasHeight\n          ) {\n            continue;\n          }\n\n          const distance = star.z / 1000;\n          const brightness = 1 - distance * distance;\n          const size = brightness * 5;\n\n          putPixel(x, y, brightness, size);\n        }\n\n        requestAnimationFrame(tick);\n      };\n\n      requestAnimationFrame(init);\n    }\n  }, [state.canvasHeight, state.canvasWidth]);\n\n  return (\n    <canvas\n      id=\"homeCanvas\"\n      className=\"home-canvas\"\n      ref={canvasRef}\n      width={state.canvasWidth}\n      height={state.canvasHeight}\n    ></canvas>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,OAAO,2BAA2B;AAAC;AAEnC,OAAO,SAASC,mBAAmB,GAAG;EAAA;EACpC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAACM,aAAa,EAAE,CAAC;EAE7D,SAASA,aAAa,GAAG;IACvB,MAAM;MAAEC,UAAU;MAAEC;IAAY,CAAC,GAAGC,MAAM;IAC1C,OAAO;MAAEF,UAAU;MAAEC;IAAY,CAAC;EACpC;EACAP,SAAS,CAAC,MAAM;IACd,SAASS,kBAAkB,GAAG;MAC5BL,aAAa,CAACC,aAAa,EAAE,CAAC;IAChC;IACAG,MAAM,CAACE,gBAAgB,CAAC,QAAQ,EAAED,kBAAkB,CAAC;IAErD,OAAO,MAAM;MACXD,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAEF,kBAAkB,CAAC;IAC1D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,MAAMG,SAAS,GAAGX,MAAM,CAAoB,IAAI,CAAC;EACjD,MAAMY,KAAK,GAAG;IACZC,WAAW,EAAEX,UAAU,CAACG,UAAU;IAClCS,YAAY,EAAEZ,UAAU,CAACI;EAC3B,CAAC;EAEDP,SAAS,CAAC,MAAM;IACd,IAAIY,SAAS,CAACI,OAAO,EAAE;MACrB,MAAMC,CAAC,GAAGL,SAAS,CAACI,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MAE5C,MAAMC,SAAS,GAAIC,KAAa,IAAK;QACnC,MAAMC,GAAG,GAAG,EAAE;QACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;UAC9B,MAAMC,IAAI,GAAG;YACXC,CAAC,EAAE,CAACC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,IAAIb,KAAK,CAACC,WAAW,GAAG,CAAC;YAChDa,CAAC,EAAE,CAACF,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,IAAIb,KAAK,CAACE,YAAY,GAAG,CAAC;YACjDa,CAAC,EAAGN,CAAC,GAAG,IAAI,GAAIF;UAClB,CAAC;UACDC,GAAG,CAACQ,IAAI,CAACN,IAAI,CAAC;QAChB;QACA,OAAOF,GAAG;MACZ,CAAC;MAED,IAAIS,KAAK,GAAGjB,KAAK,CAACC,WAAW,GAAGK,SAAS,CAAC,IAAI,CAAC;MAE/C,MAAMY,KAAK,GAAG,MAAM;QAClBd,CAAC,CAAEe,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEnB,KAAK,CAACC,WAAW,EAAED,KAAK,CAACE,YAAY,CAAC;MAC1D,CAAC;MAED,MAAMkB,QAAQ,GAAG,CACfT,CAAS,EACTG,CAAS,EACTO,UAAkB,EAClBC,IAAY,KACT;QACH,MAAMC,SAAS,GAAGF,UAAU,GAAG,GAAG;QAClC,MAAMG,GAAG,GACP,MAAM,GAAGD,SAAS,GAAG,GAAG,GAAGA,SAAS,GAAG,GAAG,GAAGA,SAAS,GAAG,GAAG;QAC9DnB,CAAC,CAAEqB,SAAS,GAAGD,GAAG;QAClBpB,CAAC,CAAEe,QAAQ,CAACR,CAAC,EAAEG,CAAC,EAAEQ,IAAI,EAAEA,IAAI,CAAC;MAC/B,CAAC;MAED,MAAMI,SAAS,GAAIC,QAAgB,IAAK;QACtC,MAAMpB,KAAK,GAAGU,KAAK,CAACW,MAAM;QAE1B,KAAK,IAAIlB,IAAI,IAAIO,KAAK,EAAE;UACtBP,IAAI,CAACK,CAAC,IAAIY,QAAQ;QACpB;QACA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEQ,KAAK,CAACV,KAAK,GAAG,CAAC,CAAC,CAACQ,CAAC,GAAG,IAAI,EAAEN,CAAC,EAAE,EAAE;UAC9C;UACAQ,KAAK,CAACY,GAAG,EAAE;UACXZ,KAAK,CAACa,OAAO,CAAC;YACZnB,CAAC,EAAE,CAACC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,IAAIb,KAAK,CAACC,WAAW,GAAG,CAAC;YAChDa,CAAC,EAAE,CAACF,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,IAAIb,KAAK,CAACE,YAAY,GAAG,CAAC;YACjDa,CAAC,EAAEE,KAAK,CAAC,CAAC,CAAC,CAACF,CAAC,GAAG,IAAI,GAAGR,KAAK,CAAE;UAChC,CAAC,CAAC;QACJ;MACF,CAAC;;MAED,IAAIwB,QAAgB;MACpB,MAAMC,IAAI,GAAIC,IAAY,IAAK;QAC7BF,QAAQ,GAAGE,IAAI;QACfC,qBAAqB,CAACC,IAAI,CAAC;MAC7B,CAAC;MAED,MAAMA,IAAI,GAAIF,IAAY,IAAK;QAC7B,IAAIG,OAAO,GAAGH,IAAI,GAAGF,QAAQ;QAC7BA,QAAQ,GAAGE,IAAI;QAEfP,SAAS,CAACU,OAAO,GAAG,IAAI,CAAC;QAEzBlB,KAAK,EAAE;QAEP,MAAMmB,EAAE,GAAGrC,KAAK,CAACC,WAAW,GAAG,CAAC;QAChC,MAAMqC,EAAE,GAAGtC,KAAK,CAACE,YAAY,GAAG,CAAC;QAEjC,KAAK,IAAIQ,IAAI,IAAIO,KAAK,EAAE;UACtB,MAAMN,CAAC,GAAG0B,EAAE,GAAG3B,IAAI,CAACC,CAAC,IAAID,IAAI,CAACK,CAAC,GAAG,KAAK,CAAC;UACxC,MAAMD,CAAC,GAAGwB,EAAE,GAAG5B,IAAI,CAACI,CAAC,IAAIJ,IAAI,CAACK,CAAC,GAAG,KAAK,CAAC;UAExC,IACEJ,CAAC,GAAG,CAAC,IACLA,CAAC,IAAIX,KAAK,CAACC,WAAW,IACtBa,CAAC,GAAG,CAAC,IACLA,CAAC,IAAId,KAAK,CAACE,YAAY,EACvB;YACA;UACF;UAEA,MAAMyB,QAAQ,GAAGjB,IAAI,CAACK,CAAC,GAAG,IAAI;UAC9B,MAAMM,UAAU,GAAG,CAAC,GAAGM,QAAQ,GAAGA,QAAQ;UAC1C,MAAML,IAAI,GAAGD,UAAU,GAAG,CAAC;UAE3BD,QAAQ,CAACT,CAAC,EAAEG,CAAC,EAAEO,UAAU,EAAEC,IAAI,CAAC;QAClC;QAEAY,qBAAqB,CAACC,IAAI,CAAC;MAC7B,CAAC;MAEDD,qBAAqB,CAACF,IAAI,CAAC;IAC7B;EACF,CAAC,EAAE,CAAChC,KAAK,CAACE,YAAY,EAAEF,KAAK,CAACC,WAAW,CAAC,CAAC;EAE3C,oBACE;IACE,EAAE,EAAC,YAAY;IACf,SAAS,EAAC,aAAa;IACvB,GAAG,EAAEF,SAAU;IACf,KAAK,EAAEC,KAAK,CAACC,WAAY;IACzB,MAAM,EAAED,KAAK,CAACE;EAAa;IAAA;IAAA;IAAA;EAAA,QACnB;AAEd;AAAC,GApIeb,mBAAmB;AAAA,KAAnBA,mBAAmB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}