{"ast":null,"code":"var _jsxFileName = \"/Users/gowtham/Documents/GitHub/myportfolio/src/components/home/BackgroundAnimation.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport \"./BackgroundAnimation.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function BackgroundAnimation() {\n  _s();\n  const [windowSize, setWindowSize] = useState(getWindowSize());\n  function getWindowSize() {\n    const {\n      innerWidth,\n      innerHeight\n    } = window;\n    return {\n      innerWidth,\n      innerHeight\n    };\n  }\n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize(getWindowSize());\n    }\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleWindowResize);\n    };\n  }, []);\n\n  // Animation\n\n  const ref = useRef(null);\n  const canvas = document.getElementById(\"homeCanvas\");\n  useEffect(() => {\n    if (ref.current) {\n      const c = ref.current.getContext(\"2d\");\n      const clear = () => {\n        c.fillRect(0, 0, windowSize.innerWidth, windowSize.innerHeight);\n      };\n      const putPixel = (x, y, brightness, size) => {\n        const intensity = brightness * 255;\n        const rgb = \"rgb(\" + intensity + \",\" + intensity + \",\" + intensity + \")\";\n        c.fillStyle = rgb;\n        c.fillRect(x, y, size, size);\n      };\n      const moveStars = distance => {\n        const count = stars.length;\n        for (let star of stars) {\n          star.z += distance;\n        }\n        for (let i = 0; stars[count - 1].z > 1000; i++) {\n          // Replace star\n          stars.pop();\n          stars.unshift({\n            x: (Math.random() - 0.5) * windowSize.innerWidth * 2,\n            y: (Math.random() - 0.5) * windowSize.innerHeight * 2,\n            z: stars[0].z - 1000 / count // keep z ordered\n          });\n        }\n      };\n\n      let prevTime;\n      const init = time => {\n        prevTime = time;\n        requestAnimationFrame(tick);\n      };\n      const tick = time => {\n        let elapsed = time - prevTime;\n        prevTime = time;\n        moveStars(elapsed * 0.03);\n        clear();\n        const cx = windowSize.innerWidth / 2;\n        const cy = windowSize.innerHeight / 2;\n        const count = stars.length;\n        for (let star of stars) {\n          const x = cx + star.x / (star.z * 0.001);\n          const y = cy + star.y / (star.z * 0.001);\n          if (x < 0 || x >= windowSize.innerWidth || y < 0 || y >= windowSize.innerHeight) {\n            continue;\n          }\n          const distance = star.z / 1000;\n          const brightness = 1 - distance * distance;\n          const size = brightness * 5;\n          putPixel(x, y, brightness, size);\n        }\n        requestAnimationFrame(tick);\n      };\n      requestAnimationFrame(init);\n    }\n  }, [stars, windowSize]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"homeCanvas\",\n    className: \"home-canvas\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 10\n  }, this);\n}\n_s(BackgroundAnimation, \"L+djFPuVYuV+QNjZlibkSmSKq48=\");\n_c = BackgroundAnimation;\nvar _c;\n$RefreshReg$(_c, \"BackgroundAnimation\");","map":{"version":3,"names":["useState","useEffect","useRef","BackgroundAnimation","windowSize","setWindowSize","getWindowSize","innerWidth","innerHeight","window","handleWindowResize","addEventListener","removeEventListener","ref","canvas","document","getElementById","current","c","getContext","clear","fillRect","putPixel","x","y","brightness","size","intensity","rgb","fillStyle","moveStars","distance","count","stars","length","star","z","i","pop","unshift","Math","random","prevTime","init","time","requestAnimationFrame","tick","elapsed","cx","cy"],"sources":["/Users/gowtham/Documents/GitHub/myportfolio/src/components/home/BackgroundAnimation.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport \"./BackgroundAnimation.css\";\n\nexport function BackgroundAnimation() {\n  const [windowSize, setWindowSize] = useState(getWindowSize());\n\n  function getWindowSize() {\n    const { innerWidth, innerHeight } = window;\n    return { innerWidth, innerHeight };\n  }\n\n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize(getWindowSize());\n    }\n\n    window.addEventListener(\"resize\", handleWindowResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleWindowResize);\n    };\n  }, []);\n\n  // Animation\n\n  const ref = useRef<HTMLCanvasElement>(null);\n  const canvas = document.getElementById(\"homeCanvas\");\n\n  useEffect(() => {\n    if (ref.current) {\n      const c = ref.current.getContext(\"2d\");\n\n      const clear = () => {\n        c!.fillRect(0, 0, windowSize.innerWidth, windowSize.innerHeight);\n      };\n\n      const putPixel = (\n        x: number,\n        y: number,\n        brightness: number,\n        size: number\n      ) => {\n        const intensity = brightness * 255;\n        const rgb =\n          \"rgb(\" + intensity + \",\" + intensity + \",\" + intensity + \")\";\n        c!.fillStyle = rgb;\n        c!.fillRect(x, y, size, size);\n      };\n\n      const moveStars = (distance: number) => {\n        const count = stars.length;\n        for (let star of stars) {\n          star.z += distance;\n        }\n        for (let i = 0; stars[count - 1].z > 1000; i++) {\n          // Replace star\n          stars.pop();\n          stars.unshift({\n            x: (Math.random() - 0.5) * windowSize.innerWidth * 2,\n            y: (Math.random() - 0.5) * windowSize.innerHeight * 2,\n            z: stars[0].z - 1000 / count, // keep z ordered\n          });\n        }\n      };\n\n      let prevTime: number;\n      const init = (time: number) => {\n        prevTime = time;\n        requestAnimationFrame(tick);\n      };\n\n      const tick = (time: number) => {\n        let elapsed = time - prevTime;\n        prevTime = time;\n\n        moveStars(elapsed * 0.03);\n\n        clear();\n\n        const cx = windowSize.innerWidth / 2;\n        const cy = windowSize.innerHeight / 2;\n\n        const count = stars.length;\n        for (let star of stars) {\n          const x = cx + star.x / (star.z * 0.001);\n          const y = cy + star.y / (star.z * 0.001);\n\n          if (\n            x < 0 ||\n            x >= windowSize.innerWidth ||\n            y < 0 ||\n            y >= windowSize.innerHeight\n          ) {\n            continue;\n          }\n\n          const distance = star.z / 1000;\n          const brightness = 1 - distance * distance;\n          const size = brightness * 5;\n\n          putPixel(x, y, brightness, size);\n        }\n\n        requestAnimationFrame(tick);\n      };\n\n      requestAnimationFrame(init);\n    }\n  }, [stars, windowSize]);\n\n  return <canvas id=\"homeCanvas\" className=\"home-canvas\" ref={ref}></canvas>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}